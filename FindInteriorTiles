public void FindInteriorTiles()
{
    for (int k = 0; k < candidateTiles.Count(); k++)
    {
        bool interiorOne = false;
        bool interiorTwo = false;
        bool interiorThree = false;
        bool interiorFour = false;
        Parallel.For(0, candidateTiles.Count(), (j, interiorState) =>
        {
            if (candidateTiles[j][0] > candidateTiles[k][0] & candidateTiles[j][1] == candidateTiles[k][1])
            {
                interiorOne = true;
            }
            if (candidateTiles[j][0] < candidateTiles[k][0] & candidateTiles[j][1] == candidateTiles[k][1])
            {
                interiorTwo = true;
            }
            if (candidateTiles[j][1] > candidateTiles[k][1] & candidateTiles[j][0] == candidateTiles[k][0])
            {
                interiorThree = true;
            }
            if (candidateTiles[j][1] < candidateTiles[k][1] & candidateTiles[j][0] == candidateTiles[k][0])
            {
                interiorFour = true;
            }
            if (interiorOne & interiorTwo & interiorThree & interiorFour)
            {
                interiorState.Break();
            }
        });
        if (interiorOne & interiorTwo & interiorThree & interiorFour)
        {
            interior_tiles.Add(candidateTiles[k]);
        }
    };
}
