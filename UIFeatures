using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class UIFeatures : MonoBehaviour, IDragHandler, IBeginDragHandler, IEndDragHandler {

    /// <summary>
    /// This class has methods that allow for panel interaction, including repositioning, and the translation of panel text objects.
    /// </summary>

    int dragInt;
    Vector3 previousMousePosition;
    Vector3 nextMousePosition;
    Vector3 originalPosition;

    public void OnDrag(PointerEventData eventData)
    {
        if(dragInt == 0)
        {
            if (eventData.dragging)
            {
                nextMousePosition = Input.mousePosition;
                if (nextMousePosition != previousMousePosition)
                {
                     gameObject.transform.localPosition = new Vector3
                     (gameObject.transform.localPosition.x + 2 * (nextMousePosition.x - previousMousePosition.x),
                     gameObject.transform.localPosition.y + 2 * (nextMousePosition.y - previousMousePosition.y),
                     gameObject.transform.localPosition.z);
                }
            }
            dragInt = 1;
        }
        else if(dragInt == 1)
        {
            previousMousePosition = Input.mousePosition;
            dragInt = 0;
        } 
    }

    public void OnBeginDrag(PointerEventData eventData)
    {
        previousMousePosition = Input.mousePosition;
    }

    public void OnEndDrag(PointerEventData eventData)
    {
       
    }

	// Pass a list of UI panel objects and translate the associated text objects
	public void CallTranslations(List<GameObject> panels)
	{
		var s = SceneManager.GetSceneAt(0);
		var allGameObjects = s.GetRootGameObjects();
		for (int j = 0; j < allGameObjects.Length; j++)
		{
			if (allGameObjects[j].GetComponent<RectTransform>())
			{
				panels.Add(allGameObjects[j]);
			}
		}
		TranslateMenu(panels); 
	}

	// Abitrary Panel Translation

	public string ReturnAlternate(string item, List<string> keys)
	{
		if (keys.Contains(item))
		{
			return item;
		}
		item = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(item);
		if (item.Contains("And"))
		{
			item = item.Replace("And", "and");
		}
		if (item.Contains("AND"))
		{
			item = item.Replace("AND", "and");
		}
		if (keys.Contains(item))
		{           
			return item;
		}
		item = item.ToLower();
		return item;
	}

	public string ReturnEnglish(string item, string language)
	{
		//
		foreach (var term in termLanguageTranslations.Keys)
		{
			foreach (var language in termLanguageTranslations[term].Keys)
			{
				if (termLanguageTranslations[term][language].ToLower() == item)
				{
					return term;
				}
			}
		}
		return "";
	}

	public void TranslateDropdown(TMPro.TMP_Dropdown dropdown, string language)
	{
		foreach (var option in dropdown.options)
		{
			if (termLanguageTranslations.ContainsKey(option.text.TrimEnd()))
			{
				option.text = termLanguageTranslations[option.text.TrimEnd()][language];
			}
			else
			{
				bool foundTerm = false;
				foreach (var term in termLanguageTranslations.Keys)
				{
					foreach (var language in termLanguageTranslations[term].Keys)
					{
						if (termLanguageTranslations[term][language] == option.text.TrimEnd())
						{
							option.text = termLanguageTranslations[term][language];
							foundTerm = true;
							break;
						}
					}
					if (foundTerm == true)
					{
						break;
					}
				}
			}
		}
	}

	public void GetChildRecursive(Transform child, string language)
	{
		TranslateObject(child, language);
		foreach (Transform childOne in child)
		{
			GetChildRecursive(childOne, language);
		}
	}

	public void TranslateObject(Transform child, string language)
	{
		if (child.gameObject.GetComponent<TMP_Dropdown>())
		{
			translate_dropdown(child.gameObject.GetComponent<TMP_Dropdown>());
		}
		// TMP
		if (child.gameObject.GetComponent<TextMeshProUGUI>())
		{
			if (termLanguageTranslations.ContainsKey(child.gameObject.GetComponent<TextMeshProUGUI>().text.TrimEnd()))
			{
				child.gameObject.GetComponent<TextMeshProUGUI>().text = termLanguageTranslations[child.gameObject.GetComponent<TextMeshProUGUI>().text.TrimEnd()][language];
			}  
			else
			{
				bool foundTerm = false;
				foreach (var term in termLanguageTranslations.Keys)
				{
					foreach (var language in termLanguageTranslations[term].Keys)
					{
						if (termLanguageTranslations[term][language] == child.gameObject.GetComponent<TextMeshProUGUI>().text.TrimEnd())
						{
							child.gameObject.GetComponent<TextMeshProUGUI>().text = termLanguageTranslations[term][language];
							foundTerm = true;
							break;
						}         
					}
					if (foundTerm == true)
					{
						break;
					}
				}
			}
		}
		// Text
		else if (child.gameObject.GetComponent<Text>())
		{
			if (termLanguageTranslations.ContainsKey(child.gameObject.GetComponent<Text>().text.TrimEnd()))
			{
				child.gameObject.GetComponent<Text>().text = termLanguageTranslations[child.gameObject.GetComponent<Text>().text.TrimEnd()][language];
			}
			else
			{
				bool foundTerm = false;
				foreach (var term in termLanguageTranslations.Keys)
				{
					foreach (var language in termLanguageTranslations[term].Keys)
					{
						if (termLanguageTranslations[term][language] == child.gameObject.GetComponent<Text>().text.TrimEnd())
						{
							child.gameObject.GetComponent<Text>().text = termLanguageTranslations[term][language];
							foundTerm = true;
							break;
						}
					}
					if (foundTerm == true)
					{
						break;
					}
				}
			}
		}
	}

	public void TranslateMenu(List<GameObject> PanelList, string language)
	{
		foreach (var panel in PanelList)
		{
			foreach (Transform child in panel.transform)
			{
				GetChildRecursive(child, language);
			}
		}
	}
	
	  // Use this for initialization
    void Start () {
        originalPosition = gameObject.transform.localPosition;
	  }

	// Update is called once per frame
	void Update () {
        // Snaps the menu back On screen if the player attempts to move it off screen
		    if(gameObject.transform.localPosition.x > (Screen.currentResolution.width / 2) + (gameObject.GetComponent<RectTransform>().sizeDelta.x / 2) - 70 
           | gameObject.transform.localPosition.x < -1 * ((Screen.currentResolution.width / 2) + (gameObject.GetComponent<RectTransform>().sizeDelta.x / 2)) + 70
           | gameObject.transform.localPosition.y > (Screen.currentResolution.height / 2) + (gameObject.GetComponent<RectTransform>().sizeDelta.y / 2) - 70
           | gameObject.transform.localPosition.y < -1 * ((Screen.currentResolution.height / 2) + (gameObject.GetComponent<RectTransform>().sizeDelta.y / 2)) + 70)
        {
            gameObject.transform.localPosition = originalPosition;
        }
	}

}
