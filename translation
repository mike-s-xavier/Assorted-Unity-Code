public void call_translations()
{
    List<GameObject> panels = new List<GameObject>();
    var s = SceneManager.GetSceneAt(0);
    var allGameObjects = s.GetRootGameObjects();
    for (int j = 0; j < allGameObjects.Length; j++)
    {
        if (allGameObjects[j].GetComponent<RectTransform>())
        {
            panels.Add(allGameObjects[j]);
        }
    }
    translate_menu(panels); 
}

// Abitrary Panel Translation

public string return_atlernate(string item, List<string> keys)
{
    if (keys.Contains(item))
    {
        return item;
    }
    item = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(item);
    if (item.Contains("And"))
    {
        item = item.Replace("And", "and");
    }
    if (item.Contains("AND"))
    {
        item = item.Replace("AND", "and");
    }
    if (keys.Contains(item))
    {           
        return item;
    }
    item = item.ToLower();
    return item;
}

public string return_english(string item)
{
    //
    foreach (var term in term_language_translation.Keys)
    {
        foreach (var language in term_language_translation[term].Keys)
        {
            if (term_language_translation[term][language].ToLower() == item)
            {
                return term;
            }
        }
    }
    return "";
}

public void translate_dropdown(TMPro.TMP_Dropdown dropdown)
{
    foreach (var option in dropdown.options)
    {
        if (term_language_translation.ContainsKey(option.text.TrimEnd()))
        {
            option.text = term_language_translation[option.text.TrimEnd()][game_clock.language];
        }
        else
        {
            bool found_term = false;
            foreach (var term in term_language_translation.Keys)
            {
                foreach (var language in term_language_translation[term].Keys)
                {
                    if (term_language_translation[term][language] == option.text.TrimEnd())
                    {
                        option.text = term_language_translation[term][game_clock.language];
                        found_term = true;
                        break;
                    }
                }
                if (found_term == true)
                {
                    break;
                }
            }
        }
    }
}

public void get_child_recursive(Transform child)
{
    translate_object(child);
    foreach (Transform child_1 in child)
    {
        get_child_recursive(child_1);
    }
}

public void translate_object(Transform child)
{
    if (child.gameObject.GetComponent<TMP_Dropdown>())
    {
        translate_dropdown(child.gameObject.GetComponent<TMP_Dropdown>());
    }
    // TMP
    if (child.gameObject.GetComponent<TextMeshProUGUI>())
    {
        if (term_language_translation.ContainsKey(child.gameObject.GetComponent<TextMeshProUGUI>().text.TrimEnd()))
        {
            child.gameObject.GetComponent<TextMeshProUGUI>().text = term_language_translation[child.gameObject.GetComponent<TextMeshProUGUI>().text.TrimEnd()][game_clock.language];
        }  
        else
        {
            bool found_term = false;
            foreach (var term in term_language_translation.Keys)
            {
                foreach (var language in term_language_translation[term].Keys)
                {
                    if (term_language_translation[term][language] == child.gameObject.GetComponent<TextMeshProUGUI>().text.TrimEnd())
                    {
                        child.gameObject.GetComponent<TextMeshProUGUI>().text = term_language_translation[term][game_clock.language];
                        found_term = true;
                        break;
                    }         
                }
                if (found_term == true)
                {
                    break;
                }
            }
        }
    }
    // Text
    else if (child.gameObject.GetComponent<Text>())
    {
        if (term_language_translation.ContainsKey(child.gameObject.GetComponent<Text>().text.TrimEnd()))
        {
            child.gameObject.GetComponent<Text>().text = term_language_translation[child.gameObject.GetComponent<Text>().text.TrimEnd()][game_clock.language];
        }
        else
        {
            bool found_term = false;
            foreach (var term in term_language_translation.Keys)
            {
                foreach (var language in term_language_translation[term].Keys)
                {
                    if (term_language_translation[term][language] == child.gameObject.GetComponent<Text>().text.TrimEnd())
                    {
                        child.gameObject.GetComponent<Text>().text = term_language_translation[term][game_clock.language];
                        found_term = true;
                        break;
                    }
                }
                if (found_term == true)
                {
                    break;
                }
            }
        }
    }
}

public void translate_menu(List<GameObject> panels_list)
{
    foreach (var panel in panels_list)
    {
        foreach (Transform child in panel.transform)
        {
            get_child_recursive(child);
        }
    }
}
