using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Collections.Specialized;
using UnityEngine.UI;
using UnityEngine;
using TMPro;
using UnityEngine.EventSystems;
using System.Threading;

public class statistics_graphs : MonoBehaviour {

    public GameObject point_on_graph;
    public GameObject line_on_graph;

    public GameObject graph_label;

    public GameObject vertical_axis_label;
    public GameObject horizontal_axis_label;

    public List<GameObject> vertical_axis_label_objects = new List<GameObject>();
    public List<GameObject> horizontal_axis_label_objects = new List<GameObject>();
    public List<GameObject> points_on_graph_objects = new List<GameObject>();
    public List<GameObject> lines_between_points = new List<GameObject>();

    public GameObject statistics_graph_panel;

    public void destroy_old_graph()
    {
        // Destroy Any Old Instantiated Labels, Points, and Lines
        foreach (var g_obj in vertical_axis_label_objects)
        {
            Destroy(g_obj);
        }
        vertical_axis_label_objects.Clear();
        foreach (var g_obj in horizontal_axis_label_objects)
        {
            Destroy(g_obj);
        }
        horizontal_axis_label_objects.Clear();
        foreach (var point_object in points_on_graph_objects)
        {
            Destroy(point_object);
        }
        points_on_graph_objects.Clear();
        foreach (var line in lines_between_points)
        {
            Destroy(line);
        }
        lines_between_points.Clear();
        graph_label.GetComponent<TextMeshProUGUI>().text = "";
    }

    public void generate_graph(Dictionary<long, decimal> statistics_dictionary, long begin_domain, long end_domain, string category)
    {
        destroy_old_graph();
        // Rename Graph
        graph_label.GetComponent<TextMeshProUGUI>().text = category + ", " + begin_domain.ToString() + " - " + end_domain.ToString();
        // Generate Vertical Axis Labels
        List<decimal> vertical_axis_labels = new List<decimal>();
        for(long k = begin_domain; k <= end_domain; k++)
        {
            vertical_axis_labels.Add(statistics_dictionary[k]);
        }
        // Sort Values
        vertical_axis_labels.Sort();
        // Select 3 Values
        List<decimal> temp_vertical_axis_labels = new List<decimal>();
        temp_vertical_axis_labels.Add(vertical_axis_labels[0]); 
        temp_vertical_axis_labels.Add((vertical_axis_labels[0] + vertical_axis_labels.Last()) / 2);
        temp_vertical_axis_labels.Add(vertical_axis_labels.Last());
        vertical_axis_labels = temp_vertical_axis_labels;
        // Generate Horizontal Axis (Year) Labels
        List<long> horizontal_axis_labels = new List<long>();
        long horizontal_label_skip_value =  (long) (Math.Abs(begin_domain - end_domain)/ (float) 10);
        if(horizontal_label_skip_value < 1)
        {
            horizontal_label_skip_value = 1;
        }
        for (long k = begin_domain; k <= end_domain; k += horizontal_label_skip_value)
        {
            if(k <= end_domain)
            {
                horizontal_axis_labels.Add(k);
            }
        }
        // Sort Years
        horizontal_axis_labels.Sort();
        // Place Vertical Axis Labels
        long i = 1;
        float midpoint = 0;
        foreach (var value in vertical_axis_labels)
        {
            if(i == 1)
            {
                GameObject new_vertical_axis_label = Instantiate(vertical_axis_label) as GameObject;
                new_vertical_axis_label.transform.SetParent(statistics_graph_panel.transform, false);
                if (category.Substring(category.Length - 6) == "Change")
                {
                    new_vertical_axis_label.GetComponent<TextMeshProUGUI>().text = Math.Round((value * 100), 2, MidpointRounding.AwayFromZero).ToString();
                }
                else if (category.Substring(category.Length - 4) == "Rate")
                {
                    new_vertical_axis_label.GetComponent<TextMeshProUGUI>().text = Math.Round((value * 1000), 2, MidpointRounding.AwayFromZero).ToString();
                }
                else
                {
                    new_vertical_axis_label.GetComponent<TextMeshProUGUI>().text = Math.Round(value, 2, MidpointRounding.AwayFromZero).ToString();
                }
                new_vertical_axis_label.transform.localPosition = new Vector3(-400, (float) -112.5 + 12 + 10, 0);
                vertical_axis_label_objects.Add(new_vertical_axis_label);
                i += 1;
            }
            else if (i == 2)
            {
                GameObject new_vertical_axis_label = Instantiate(vertical_axis_label) as GameObject;
                new_vertical_axis_label.transform.SetParent(statistics_graph_panel.transform, false);
                midpoint = (float)value;
                if (category.Substring(category.Length - 6) == "Change")
                {
                    new_vertical_axis_label.GetComponent<TextMeshProUGUI>().text = Math.Round((value * 100), 2, MidpointRounding.AwayFromZero).ToString();
                }
                else if (category.Substring(category.Length - 4) == "Rate")
                {
                    new_vertical_axis_label.GetComponent<TextMeshProUGUI>().text = Math.Round((value * 1000), 2, MidpointRounding.AwayFromZero).ToString();
                }
                else
                {
                    new_vertical_axis_label.GetComponent<TextMeshProUGUI>().text = Math.Round(value, 2, MidpointRounding.AwayFromZero).ToString();
                }
                new_vertical_axis_label.transform.localPosition = new Vector3(-400, 0, 0);
                vertical_axis_label_objects.Add(new_vertical_axis_label);
                i += 1;
            }
            else if(i == 3)
            {
                GameObject new_vertical_axis_label = Instantiate(vertical_axis_label) as GameObject;
                new_vertical_axis_label.transform.SetParent(statistics_graph_panel.transform, false);
                if (category.Substring(category.Length - 6) == "Change")
                {
                    new_vertical_axis_label.GetComponent<TextMeshProUGUI>().text = Math.Round((value * 100), 2, MidpointRounding.AwayFromZero).ToString();
                }
                else if (category.Substring(category.Length - 4) == "Rate")
                {
                    new_vertical_axis_label.GetComponent<TextMeshProUGUI>().text = Math.Round((value * 1000), 2, MidpointRounding.AwayFromZero).ToString();
                }
                else
                {
                    new_vertical_axis_label.GetComponent<TextMeshProUGUI>().text = Math.Round(value, 2, MidpointRounding.AwayFromZero).ToString();
                }
                new_vertical_axis_label.transform.localPosition = new Vector3(-400, (float) 112.5 - 12, 0);
                vertical_axis_label_objects.Add(new_vertical_axis_label);
                i += 1;
            }
        }
        // Place Horizontal Axis Labels
        i = 1;
        foreach (var year in horizontal_axis_labels)
        {
            if(i == 1)
            {
                GameObject new_horizontal_axis_label = Instantiate(horizontal_axis_label) as GameObject;
                new_horizontal_axis_label.transform.SetParent(statistics_graph_panel.transform, false);
                long new_year = year;
                new_horizontal_axis_label.GetComponent<TextMeshProUGUI>().text = new_year.ToString();
                new_horizontal_axis_label.transform.localPosition = new Vector3(-260, -125, 0);
                horizontal_axis_label_objects.Add(new_horizontal_axis_label);
                i += 1;
            }
            else if(i > 1 & i <= horizontal_axis_labels.Count())
            {
                GameObject new_horizontal_axis_label = Instantiate(horizontal_axis_label) as GameObject;
                new_horizontal_axis_label.transform.SetParent(statistics_graph_panel.transform, false);
                long new_year = year;
                new_horizontal_axis_label.GetComponent<TextMeshProUGUI>().text = new_year.ToString();
                new_horizontal_axis_label.transform.localPosition = new Vector3(-260 + (545 / (horizontal_axis_labels.Count() - 1)) * (i - 1), -125, 0);
                horizontal_axis_label_objects.Add(new_horizontal_axis_label);
                i += 1;
            }
        }
        // Create Ordered List of Years on Horizontal Axis
        horizontal_axis_labels.Sort();
        // Graph Points
        i = 1;
        float max_distance_above = (float) Math.Abs(vertical_axis_labels.Last() - vertical_axis_labels[0]);     
        float max_distance_below = (float) Math.Abs(vertical_axis_labels[0] - vertical_axis_labels[1]);
        foreach (var year in statistics_dictionary.Keys)
        {
            if(year <= end_domain & year >= begin_domain & horizontal_axis_labels.Contains(year))
            {
                GameObject new_point = Instantiate(point_on_graph) as GameObject;
                new_point.SetActive(true);
                // Position Point Information Rectangle
                if (statistics_dictionary[year] >= vertical_axis_labels[0] & statistics_dictionary[year] <= (3 / 4) * (vertical_axis_labels.Last() - vertical_axis_labels[0]))
                {
                    new_point.transform.GetChild(0).gameObject.transform.localPosition = new_point.transform.GetChild(0).gameObject.transform.localPosition + new Vector3(0, 20, 0);
                }
                else
                {
                    new_point.transform.GetChild(0).gameObject.transform.localPosition = new_point.transform.GetChild(0).gameObject.transform.localPosition + new Vector3(0, -20, 0);
                }
                // Point Text Value
                if(category.Substring(category.Length - 6) == "Change")
                {
                    new_point.transform.GetChild(0).gameObject.GetComponent<TextMeshProUGUI>().text = year.ToString() + ": " + Math.Round((statistics_dictionary[year] * 100), 2, MidpointRounding.AwayFromZero).ToString();
                }
                else if (category.Substring(category.Length - 4) == "Rate")
                {
                    new_point.transform.GetChild(0).gameObject.GetComponent<TextMeshProUGUI>().text = year.ToString() + ": " + Math.Round((statistics_dictionary[year] * 1000), 2, MidpointRounding.AwayFromZero).ToString();
                }
                else
                {
                    new_point.transform.GetChild(0).gameObject.GetComponent<TextMeshProUGUI>().text = year.ToString() + ": " + Math.Round(statistics_dictionary[year], 2, MidpointRounding.AwayFromZero).ToString();
                }               
                new_point.transform.GetChild(0).gameObject.SetActive(false);
                new_point.transform.SetParent(statistics_graph_panel.transform, false);
                if(horizontal_axis_labels.Last() % 2 == 0)
                {
                    if(max_distance_above != 0)
                    {
                        if (horizontal_axis_labels.Contains(year))
                        {
                            foreach(var hal in horizontal_axis_label_objects)
                            {
                                if(hal.GetComponent<TextMeshProUGUI>().text == year.ToString())
                                {
                                    if((float) statistics_dictionary[year] > midpoint)
                                    {
                                        new_point.transform.localPosition = new Vector3(hal.transform.localPosition.x, (float)(200) * (float)(statistics_dictionary[year] - vertical_axis_labels[1]) / max_distance_above, 0);
                                    }
                                    else
                                    {
                                        new_point.transform.localPosition = new Vector3(hal.transform.localPosition.x, (float)(100) * (float)(statistics_dictionary[year] - vertical_axis_labels[1]) / max_distance_below, 0);
                                    }
                                }
                            }
                        }
                        
                    }
                    else
                    {
                        if (horizontal_axis_labels.Contains(year))
                        {
                            foreach (var hal in horizontal_axis_label_objects)
                            {
                                if (hal.GetComponent<TextMeshProUGUI>().text == year.ToString())
                                {
                                    new_point.transform.localPosition = new Vector3(hal.transform.localPosition.x, 0, 0);
                                }
                            }
                        }
                    }
                }
                else
                {
                    if(max_distance_above != 0)
                    {
                        if (horizontal_axis_labels.Contains(year))
                        {
                            foreach (var hal in horizontal_axis_label_objects)
                            {
                                if (hal.GetComponent<TextMeshProUGUI>().text == year.ToString())
                                {
                                    if ((float)statistics_dictionary[year] > midpoint)
                                    {
                                        new_point.transform.localPosition = new Vector3(hal.transform.localPosition.x, Math.Min(200, (float)(200) * (float)(statistics_dictionary[year] - vertical_axis_labels[1]) / max_distance_above), 0);
                                    }
                                    else
                                    {
                                        new_point.transform.localPosition = new Vector3(hal.transform.localPosition.x, Math.Min(100, (float)(100) * (float)(statistics_dictionary[year] - vertical_axis_labels[1]) / max_distance_below), 0);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (horizontal_axis_labels.Contains(year))
                        {
                            foreach (var hal in horizontal_axis_label_objects)
                            {
                                if (hal.GetComponent<TextMeshProUGUI>().text == year.ToString())
                                {
                                    new_point.transform.localPosition = new Vector3(hal.transform.localPosition.x, 0, 0);
                                }
                            }
                        }
                    }
                   
                }
                points_on_graph_objects.Add(new_point);
                if (!horizontal_axis_labels.Contains(year))
                {
                    new_point.GetComponent<RectTransform>().sizeDelta = new Vector2(5, 5);
                }
                i += 1;
            }
        }
        // Connect Points With Lines
        foreach(var k in horizontal_axis_labels)
        {
            if(horizontal_axis_labels.IndexOf(k) < horizontal_axis_labels.Count() - 1 & horizontal_axis_labels.Count() > 1) 
            {
                if (!points_on_graph_objects[horizontal_axis_labels.IndexOf(k)].GetComponent<LineRenderer>())
                {
                    int current_point_index = horizontal_axis_labels.IndexOf(k);
                    int next_point_index = horizontal_axis_labels.IndexOf(k) + 1;
                    LineRenderer line;
                    // Add a Line Renderer to the GameObject
                    line = points_on_graph_objects[current_point_index].AddComponent<LineRenderer>();
                    line.material = new Material(Shader.Find("Legacy Shaders/Particles/Alpha Blended Premultiply"));
                    line.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;
                    line.receiveShadows = false;
                    // Set the width of the Line Renderer
                    line.startWidth = 0.001f;
                    line.endWidth = 0.001f;
                    line.startColor = Color.white;
                    line.endColor = Color.white;
                    // Set the number of vertex fo the Line Renderer
                    line.positionCount = 2;
                    line.SetPosition(0, points_on_graph_objects[current_point_index].transform.position);
                    line.SetPosition(1, points_on_graph_objects[next_point_index].transform.position);
                }
            }
        }
        // Turn On or Refresh Graph
        statistics_graph_panel.SetActive(true);
    }

	// Use this for initialization
	void Start () {
        point_on_graph.SetActive(false);
        line_on_graph.SetActive(false);
        statistics_graph_panel.SetActive(false);
	}
	
	// Update is called once per frame
	void Update () {

    }
}
