   List<string> diseases_displayed = new List<string>();

    public List<GameObject> infectious_disease_panel_instantiations = new List<GameObject>();

    public List<GameObject> disease_linebars_displayed = new List<GameObject>();

    // Display Diseases in Listing
    public void instantiations_for_disease_display(string disease, int m)
    {
        // Add to Diseases Displayed List
        diseases_displayed.Add(disease);
        // Instantiate Active Disease Label
        GameObject new_disease_label = Instantiate(infectious_disease_label) as GameObject;
        new_disease_label.transform.SetParent(infectious_disease_panel.transform, false);
        new_disease_label.GetComponent<TextMeshProUGUI>().text = disease.ToLower();
        new_disease_label.transform.localPosition = new Vector3(-85, 310 - (40 * m), 0);
        new_disease_label.SetActive(true);
        infectious_disease_panel_instantiations.Add(new_disease_label);
        // Add Disease Deaths Amount
        GameObject new_disease_amount = Instantiate(infectious_disease_counter) as GameObject;
        new_disease_amount.transform.SetParent(infectious_disease_panel.transform, false);
        if (management_settlement.diseases_and_deaths.Keys.Contains(disease))
        {
            new_disease_amount.GetComponent<TextMeshProUGUI>().text = management_settlement.diseases_and_deaths[disease].ToString();
        }
        else
        {
            new_disease_amount.GetComponent<TextMeshProUGUI>().text = "0";
        }
        new_disease_amount.transform.localPosition = new Vector3(85, 310 - (40 * m), 0);
        new_disease_amount.SetActive(true);
        infectious_disease_panel_instantiations.Add(new_disease_amount);
        // Instantiate Disease Linebars
        if (int.Parse(diseases_page_number_input.GetComponent<TMP_InputField>().text) < int.Parse(diseases_total_pages.text))
        {
            if (m < 7)
            {
                GameObject new_unit_linebar = Instantiate(infectious_disease_label_linebar) as GameObject;
                new_unit_linebar.transform.SetParent(infectious_disease_panel.transform, false);
                new_unit_linebar.transform.localPosition = new Vector3(0, 295 - (40 * (m % 16)), 0);
                disease_linebars_displayed.Add(new_unit_linebar);
            }
        }
        else if (int.Parse(diseases_page_number_input.GetComponent<TMP_InputField>().text) == int.Parse(diseases_total_pages.text))
        {
            if (active_diseases.Count() <= 16)
            {
                if (m < active_diseases.Count() - 1)
                {
                    GameObject new_unit_linebar = Instantiate(infectious_disease_label_linebar) as GameObject;
                    new_unit_linebar.transform.SetParent(infectious_disease_panel.transform, false);
                    new_unit_linebar.transform.localPosition = new Vector3(0, 295 - (40 * (m % 16)), 0);
                    disease_linebars_displayed.Add(new_unit_linebar);
                }
            }
            else
            {
                if (active_diseases.Count() % 16 == 0 & active_diseases.Count() != 0)
                {
                    if (m < 16)
                    {
                        GameObject new_unit_linebar = Instantiate(infectious_disease_label_linebar) as GameObject;
                        new_unit_linebar.transform.SetParent(infectious_disease_panel.transform, false);
                        new_unit_linebar.transform.localPosition = new Vector3(0, 295 - (40 * (m % 16)), 0);
                        disease_linebars_displayed.Add(new_unit_linebar);
                    }
                }
                else
                {
                    if (m < (active_diseases.Count() % 16) - 1)
                    {
                        GameObject new_unit_linebar = Instantiate(infectious_disease_label_linebar) as GameObject;
                        new_unit_linebar.transform.SetParent(infectious_disease_panel.transform, false);
                        new_unit_linebar.transform.localPosition = new Vector3(0, 295 - (40 * (m % 16)), 0);
                        disease_linebars_displayed.Add(new_unit_linebar);
                    }
                }
            }
        }
    }

    // Pagination
    public List<string> active_diseases = new List<string>();
    public GameObject diseases_page_number_input;
    public TextMeshProUGUI diseases_total_pages;

    public GameObject next_page_button;
    public GameObject previous_page_button;

    public void diseases_page_number_determiner()
    {
        active_diseases.Clear();
        foreach (var disease in management_settlement.sid_outbreak_status.Keys)
        {
            if (management_settlement.sid_outbreak_status[disease] == true)
            {
                active_diseases.Add(disease);
            }
        }
        // Determine Total Pages and Additional Validation for Page Number Input
        if ((active_diseases.Count() - 1) % 16 == 0)
        {
            diseases_total_pages.text = (((active_diseases.Count() - 1) / 16)).ToString();
        }
        else
        {
            diseases_total_pages.text = ((((active_diseases.Count() - 1) - (((active_diseases.Count() - 1)) % 16)) / 16)).ToString();
        }
        if (int.Parse(diseases_page_number_input.GetComponent<TMP_InputField>().text) < 0)
        {
            diseases_page_number_input.GetComponent<TMP_InputField>().text = "0";
        }
        if (int.Parse(diseases_page_number_input.GetComponent<TMP_InputField>().text) > int.Parse(diseases_total_pages.text))
        {
            diseases_page_number_input.GetComponent<TMP_InputField>().text = diseases_total_pages.text;
        }
        // Enable/Disable Paging Buttons
        if (int.Parse(diseases_page_number_input.GetComponent<TMP_InputField>().text) == int.Parse(diseases_total_pages.text))
        {
            next_page_button.SetActive(false);
        }
        if (int.Parse(diseases_page_number_input.GetComponent<TMP_InputField>().text) == 0)
        {
            previous_page_button.SetActive(false);
        }
        if (int.Parse(diseases_page_number_input.GetComponent<TMP_InputField>().text) > 0)
        {
            previous_page_button.SetActive(true);
        }
        if (int.Parse(diseases_page_number_input.GetComponent<TMP_InputField>().text) < int.Parse(diseases_total_pages.text))
        {
            next_page_button.SetActive(true);
        }
        // Display Units
        display_diseases(int.Parse(diseases_page_number_input.GetComponent<TMP_InputField>().text));
    }

    public void increase_page_number()
    {
        if (int.Parse(diseases_page_number_input.GetComponent<TMP_InputField>().text) < int.Parse(diseases_total_pages.text))
        {
            diseases_page_number_input.GetComponent<TMP_InputField>().text = (int.Parse(diseases_page_number_input.GetComponent<TMP_InputField>().text) + 1).ToString();

        }
        destroy_disease_listings();
        diseases_page_number_determiner();
    }

    public void decrease_page_number()
    {
        if (int.Parse(diseases_page_number_input.GetComponent<TMP_InputField>().text) > 0)
        {
            diseases_page_number_input.GetComponent<TMP_InputField>().text = (int.Parse(diseases_page_number_input.GetComponent<TMP_InputField>().text) - 1).ToString();
        }
        destroy_disease_listings();
        diseases_page_number_determiner();
    }

    public void display_diseases(int page_number)
    {
        // Turn On Presets
        infectious_disease_label.SetActive(true);
        infectious_disease_label_linebar.SetActive(true);
        infectious_disease_counter.SetActive(true);
        infectious_disease_skull.SetActive(true);
        //
        var m = 0;
        if (page_number == 0)
        {
            for (int p = 0; p < Math.Min(16, active_diseases.Count()); p++)
            {
                instantiations_for_disease_display(active_diseases[p], m);
                m += 1;
            }
        }
        else if (page_number > 0 & page_number < int.Parse(diseases_total_pages.text))
        {
            for (int p = 16 * page_number; p < 16 * page_number + 16; p++)
            {
                instantiations_for_disease_display(active_diseases[p], m);
                m += 1;
            }
        }
        else if (page_number == int.Parse(diseases_total_pages.text))
        {
            for (int p = 16 * page_number; p <= active_diseases.Count() - 1; p++)
            {
                instantiations_for_disease_display(active_diseases[p], m);
                m += 1;
            }
        }
        // Turn Off Presets
        infectious_disease_label.SetActive(false);
        infectious_disease_label_linebar.SetActive(false);
        infectious_disease_counter.SetActive(false);
        infectious_disease_skull.SetActive(false);
    }

    // Destroy Listings When Units Panel is Closed
    public void destroy_disease_listings()
    {
        // Perform Validation Before Destruction
        if (diseases_page_number_input.GetComponent<TMP_InputField>().text == "")
        {
            if (active_diseases.IndexOf(diseases_displayed[0]) % 16 == 0)
            {
                diseases_page_number_input.GetComponent<TMP_InputField>().text = (active_diseases.IndexOf(diseases_displayed[0]) / 16).ToString();
            }
        }
        foreach (var g_obj in infectious_disease_panel_instantiations)
        {
            Destroy(g_obj);
        }
        infectious_disease_panel_instantiations.Clear();
        foreach(var linebar in disease_linebars_displayed)
        {
            Destroy(linebar);
        }
        disease_linebars_displayed.Clear();
        // Clear active_diseases
        active_diseases.Clear();
    }
